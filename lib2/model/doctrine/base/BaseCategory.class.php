<?php

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property clob $description
 * @property boolean $is_public
 * @property integer $meta_id
 * @property Doctrine_Collection $Company
 * @property Metas $Metas
 * @property Doctrine_Collection $Company2Category
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getName()             Returns the current record's "name" value
 * @method clob                getDescription()      Returns the current record's "description" value
 * @method boolean             getIsPublic()         Returns the current record's "is_public" value
 * @method integer             getMetaId()           Returns the current record's "meta_id" value
 * @method Doctrine_Collection getCompany()          Returns the current record's "Company" collection
 * @method Metas               getMetas()            Returns the current record's "Metas" value
 * @method Doctrine_Collection getCompany2Category() Returns the current record's "Company2Category" collection
 * @method Category            setId()               Sets the current record's "id" value
 * @method Category            setName()             Sets the current record's "name" value
 * @method Category            setDescription()      Sets the current record's "description" value
 * @method Category            setIsPublic()         Sets the current record's "is_public" value
 * @method Category            setMetaId()           Sets the current record's "meta_id" value
 * @method Category            setCompany()          Sets the current record's "Company" collection
 * @method Category            setMetas()            Sets the current record's "Metas" value
 * @method Category            setCompany2Category() Sets the current record's "Company2Category" collection
 * 
 * @package    sell4
 * @subpackage model
 * @author     Wojciech Piestrak <wojtek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('of_category');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'default' => 'Nazwa kategorii',
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', 65532, array(
             'type' => 'clob',
             'notnull' => false,
             'length' => 65532,
             ));
        $this->hasColumn('is_public', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => true,
             ));
        $this->hasColumn('meta_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));

        $this->option('connection', 'globocam_classic');
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Company', array(
             'refClass' => 'Company2Category',
             'local' => 'category_id',
             'foreign' => 'company_id'));

        $this->hasOne('Metas', array(
             'local' => 'meta_id',
             'foreign' => 'meta_id'));

        $this->hasMany('Company2Category', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             ));
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             'unique' => true,
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($nestedset0);
        $this->actAs($sluggable0);
    }
}