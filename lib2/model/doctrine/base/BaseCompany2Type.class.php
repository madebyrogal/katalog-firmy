<?php

/**
 * BaseCompany2Type
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $company_id
 * @property integer $type_id
 * @property Company $Company
 * @property Type $Type
 * 
 * @method integer      getCompanyId()  Returns the current record's "company_id" value
 * @method integer      getTypeId()     Returns the current record's "type_id" value
 * @method Company      getCompany()    Returns the current record's "Company" value
 * @method Type         getType()       Returns the current record's "Type" value
 * @method Company2Type setCompanyId()  Sets the current record's "company_id" value
 * @method Company2Type setTypeId()     Sets the current record's "type_id" value
 * @method Company2Type setCompany()    Sets the current record's "Company" value
 * @method Company2Type setType()       Sets the current record's "Type" value
 * 
 * @package    sell4
 * @subpackage model
 * @author     Wojciech Piestrak <wojtek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCompany2Type extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('of_company_2_type');
        $this->hasColumn('company_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));
        $this->hasColumn('type_id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             ));

        $this->option('connection', 'globocam_classic');
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Company', array(
             'local' => 'company_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Type', array(
             'local' => 'type_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}