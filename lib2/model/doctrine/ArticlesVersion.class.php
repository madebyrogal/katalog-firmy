<?php

/**
 * ArticlesVersion
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ArticlesVersion extends BaseArticlesVersion
{
    /**
     * SAVES TRANSLATIONS
     */
    public function initalizeTranslations() {
      foreach(Lang::getInstance()->getAll()->toArray() as $lang) { //foreach language
        $this->Translation[$lang]; //nic z tym nie robię - wystarczy, że to się zainicjalizuje w obiekcie
      }
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $this->initalizeTranslations(); // żeby zapisały się wersje językowe
        parent::save($conn);
    }
    
    static function saveVersion($article, $is_active = false)
    {
        if (!$is_active) {
          if (!$article->getActiveVersion()) {
            //Jeżeli artykuł nie ma jeszcze aktywnej wersji, to ta wersja będzie aktywna (nawet jeśli w parametrach tej funkcji $is_active = false
            $is_active = true;
          }
        }

        $version = new ArticlesVersion();
        $version->setArticleId($article->getPrimaryKey());
        $version->setAuthorId($article->getAuthorId());
        $version->setArtcategoryId($article->getArtcategoryId());
//        $version->setContent($article->getContent());
//        $version->setTitle($article->getTitle());
        $version->setIsActive($is_active);

        $version->initalizeTranslations();

        $langs = Lang::getInstance()->getAll()->toArray();

        foreach($langs as $lang)
        {
            $version->Translation[$lang]['content']  =   $article->Translation[$lang]['content'];
            $version->Translation[$lang]['title']  =   $article->Translation[$lang]['title'];
            $version->Translation[$lang]['is_lang_active']  =   $article->Translation[$lang]['is_lang_active'];
        }
        
        $version->save();

        return $version;
    }

    public function PublicArticle()
    {
        $article = $this->getArticles();
        $article->setAuthorId($this->getAuthorId());
        $article->setArtcategoryId($this->getArtcategoryId());
        $langs = Lang::getInstance()->getAll()->toArray();
        foreach($langs as $lang)
        {
            $article->Translation[$lang]['content']  =   $this->Translation[$lang]['content'];
            $article->Translation[$lang]['title']  =   $this->Translation[$lang]['title'];
            $article->Translation[$lang]['is_lang_active']  =   $this->Translation[$lang]['is_lang_active'];
        }
        $conn = $article->Table->getConnection();
        $article->save($conn, false);

        ArticlesVersionTable::getInstance()->UnActiveArticleVersionAll($article->getPrimaryKey());
        $this->setIsActive(true);

        $this->save();
    }
}
