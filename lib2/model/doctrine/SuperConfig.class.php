<?php

/**
 * SuperConfig
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SuperConfig extends BaseSuperConfig
{
    public function save(Doctrine_Connection $conn = null)
    {
        $this->setSetting(self::slugifySetting($this->getSetting()));   //slugify setting :)
        $return = parent::save($conn);
        self::generateConfigFile(); //generate YAML cache file
        T::cc('frontend');
        T::cc('backend');
        return $return;
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        $return = parent::delete($conn);
        self::generateConfigFile(); //generate YAML cache file
        T::cc('frontend');
        T::cc('backend');
        return $return;
    }

    static public function slugifySetting($setting)
    {
        $setting = Doctrine_Inflector::urlize($setting);
        $setting = str_replace('-', '_', $setting);
        return $setting;
    }

    /**
     * Returns path to SuperConfig's YAML file with cached date
     *
     * @return String Path to SuperConfig YAML cache file
     */
    static public function getPath()
    {
        return sfConfig::get('sf_config_dir').'/app.yml';
    }


    /**
     * Gets contents of SuperConfig YAML file and returns it as PHP Array
     *
     * @return Array Contents of SuperConfig's YAML cache file
     */
    static public function getSuperConfig()
    {
        return sfYaml::load(self::getPath());
    }

    /**
     * Returns value for given setting name
     *
     * @param String $setting_name Name of setting
     * @return String Setting value
     */
    static public function getSettingValue($setting_name)
    {
//        return sfConfig::get('app_super_config_'.$setting_name);
        $super_config = sfConfig::get('app_super_config_'.$setting_name);
        return ($super_config != null) ? $super_config : self::getSettingValueFromDB($setting_name);
        


//        $super_config = self::getSuperConfig();
//        return (isset($super_config[$setting_name])) ? $super_config[$setting_name] : false;
    }

    static public function getSettingValueFromDB($setting_name, $default = null)
    {
      $object = Doctrine::getTable('SuperConfig')->findOneBySetting($setting_name);
      if ($object) {
        return $object->getValue();
      }
      return $default;
    }

    static public function getSettingBooleanFromDB($setting_name, $default = null)
    {
        return (self::getSettingValueFromDB($setting_name, $default) == 'on');
    }

    /**
     * Returns an array of all super config settings.
     *
     * @return Array Array of all SuperConfig settings
     */
    static public function getAll()
    {
        return self::getSuperConfig();
    }

    /**
     * Generates SuperConfig's YAML cache file.
     * Populates it with database's contents.
     */
    static public function generateConfigFile()
    {
        $yaml = self::getConfigAsYAML();
        $fp = fopen(self::getPath(), 'w');
        fwrite($fp, $yaml);
        fclose($fp);
    }

    static public function getConfigAsYAML()
    {
        $settings = Doctrine_Query::create()->from('SuperConfig')->fetchArray();
        $config = array();
        foreach($settings as $setting)
        {
          if (!isset($setting['is_secret']) || !$setting['is_secret']) {
            $config['all']['super_config'][$setting['setting']]   =   $setting['value'];
          }
        }

        $yaml = sfYaml::dump($config);
        return $yaml;
    }

    static public function findByNameQuery($name)
    {
        $q = Doctrine_Query::create()->from('SuperConfig sc')
        ->where('sc.setting = ?',$name);
        return $q;
    }

    static public function findByName($name)
    {
        return self::findByNameQuery($name)->fetchOne();
    }

    static public function getScopeChoices()
    {
        $module = sfConfig::get('mod_super_config_settings_scope_choices');
        $q = Doctrine_Query::create()->select('DISTINCT(superconfig.scope) as scope');
        $q->from('SuperConfig superconfig');
        $q->orderBy('superconfig.scope asc');
        $scopes = $q->fetchArray();
        $return = array();
        foreach($scopes as $key => $scope)
        {
          $return[$scope['scope']] = $scope['scope'];
        }
        unset($scopes);
        return $return;
    }

    static public function getByScope($name)
    {
        $q = Doctrine_Query::create()->from('SuperConfig sc')
        ->where('sc.scope = ?',$name);
        $tmp = $q->execute();
        $settings = $tmp->toArray();
        $result = array();
        foreach($settings as $key => $value)
        {
            $result[$value['setting']] = self::getValueType($value['value']);
        }
        return $result;
    }

    static private function getValueType($value)
    {
        $return = false;
        switch($value)
        {
            case 'on':
                $return = true;
                break;
            case 'true':
                $return = true;
                break;
            case 'false':
                $return = false;
                break;
            case 'off':
                $return = false;
                break;
            default:
                $return = $value;
                break;
        }
        return $return;
    }
}
