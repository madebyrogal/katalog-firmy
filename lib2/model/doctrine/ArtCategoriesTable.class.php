<?php

/**
 * ArtCategoriesTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
//class ArtCategoriesTable extends Doctrine_Table
class ArtCategoriesTable extends StgDoctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ArtCategoriesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ArtCategories');
    }

    /*
     * QUERIES
    */
    public function getIndentedChoicesQuery($art_categories_tree_key = null, $hide_root = false)
    {
        $q = Doctrine_Query::create()->from('ArtCategories artcategories');
        $q->leftJoin('artcategories.Translation t');
        $q->orderBy('root_id, lft');

        if ($hide_root) {
          $q->addWhere('level > 0');
        }

        if ($art_categories_tree_key) {
          if (is_array($art_categories_tree_key)) {
            $q->andWhereIn('root_id', $this->getRootIdByTreeKey($art_categories_tree_key));
          }
          else {
            $q->addWhere('root_id = ?', $this->getRootIdByTreeKey($art_categories_tree_key));
          }
        }

        return $q;
    }

    public function queryPublic()
    {
        $q = Doctrine_Query::create()
                ->from('ArtCategories ac')
                ->andWhere('ac.is_public = ?', true);

        return $q;
    }

    public function queryRealArtCategories($q = null)
    {
        if (!$q) {
          $q = $this->createQuery('ac');
        }
        $q->addWhere('ac.root_id = ?', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey('ARTICLES_TREE'));

        return $q;
    }

    public function queryActiveRealArtCategories()
    {
        $q = $this->queryPublic();
        $q = $this->queryRealArtCategories($q);

        return $q;
    }

    public function queryCatalogArtCategories($q = null)
    {
        if (!$q) {
          $q = $this->createQuery('ac');
        }
        $q->addWhere('ac.root_id = ?', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey('CATALOG_TREE'));

        return $q;
    }

    public function queryActiveCatalogArtCategories()
    {
        $q = $this->queryPublic();
        $q = $this->queryCatalogArtCategories($q);

        return $q;
    }

    /*
     * METHODS
    */

    public function getRootIdByTreeKey($tree_key)
    {
      if (is_array($tree_key)) {
        return $this->createQuery()->andWhereIn('tree_key', $tree_key)->execute()->getPrimaryKeys();
      }
      else {
        return $this->createQuery()->addWhere('tree_key = ?', $tree_key)->fetchOne()->getPrimaryKey();
      }
    }

    public function getIndentedChoices($art_categories_tree_key = null, $hide_root = false)
    {
        $choices = $this->getIndentedChoicesQuery($art_categories_tree_key, $hide_root)->execute();
//      $choices = $this->getIndentedChoicesQuery()->fetchArray();
        $return = array();
        foreach($choices as $artCategory)
        {
            $return[$artCategory['artcategory_id']] = $artCategory->getIndentedName();
        }
        return $return;
    }

    public function getIndentedChoices2()
    {
        $choices = $this->getIndentedChoicesQuery()->fetchArray();
        $return = array();
        foreach($choices as $choice)
        {
            $return[$choice['artcategory_id']] = $choice['name'];
        }
        return $return;
    }

    public function getCategory()
    {
        $q = Doctrine_Query::create()
                ->from('ArtCategories')
                ->Where('is_public = ?',true);

        return $q->execute();
    }

    public function getCategoriesByIds($ids, $order_by = 'asc')
    {
        $q = Doctrine_Query::create()
            ->from('ArtCategories a')
            ->leftJoin('a.Translation t')
            ->where('is_public = ?',true)
            ->whereIn('a.artcategory_id', $ids)
            ->orderBy('a.lft');
            //->orderBy('a.artcategory_id '.$order_by);
        return $q->execute();
    }


    public function doSelectForSlug($parameters)
    {
        return $this->findOneBySlugAndCulture($parameters['slug'], $parameters['sf_culture']);
    }

    public function findOneBySlugAndCulture($slug, $culture = 'pl')
    {
        $q = $this->createQuery('a')
                ->leftJoin('a.Translation t')
                ->andWhere('t.lang = ?', $culture)
                ->andWhere('t.slug = ?', $slug);
        return $q->fetchOne();
    }

}