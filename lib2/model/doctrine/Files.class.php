<?php

/**
 * Files
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Files extends BaseFiles implements StgTreDoctrineRecordInterface
{
  public function isEditableRoot() // dla StgTree
  {
    return ($this->getLevel() == 0 && $this->getIsActive()) ? true : false; //jeśli w backendzie ma być niewidoczny root, to wystarczy ustawić is_active roota na 0
  }

  public function getPathName()
  {
    $pathName = $this->getName();

    if ($this->getLevel() > 1) {
      $pathName = $this->getNode()->getParent()->getPathName().' / '.$pathName;
    }
    
    return $pathName;
  }

  /**
   * SAVES TRANSLATIONS
   */
  public function initalizeTranslations() {
    foreach(Lang::getInstance()->getAll()->toArray() as $lang) { //foreach language
      $this->Translation[$lang]; //nic z tym nie robię - wystarczy, że to się zainicjalizuje w obiekcie
    }
  }

  public function save(Doctrine_Connection $conn = null)
  {
    $this->initalizeTranslations(); // żeby zapisały się wersje językowe
    T::cc('frontend');
    DoctrineBugfixesclass::generateSlugOnUpdatedObjectWithI18n($this, $conn, 'name');
    $ret = parent::save($conn);

    $langs = Lang::getInstance()->getAll()->toArray();   //gets languages
    $forSearch = array();
    foreach($langs as $lang)    //foreach language
    {
      $forSearch[$lang] = array();
      $forSearch[$lang][] = $this->Translation[$lang]['name'];    //sets translation's content
      $forSearch[$lang][] = $this->Translation[$lang]['description'];
    }

    foreach($langs as $lang) {
      Search::saveSearchIndex($forSearch[$lang], $this, $lang);
    }

    return $ret;
  }

  public function __toString()
  {
    return ($this->isFile()) ? $this->getSlug().'.'.$this->getExtension() : $this->getName();
  }

  public function delete(Doctrine_Connection $conn = null)
  {
    Search::deleteSearchIndex(get_class($this), $this->getPrimaryKey());

    foreach ($this->getNode()->getDescendants() as $descendant) {
      $descendant->deleteAllRelatedObjects();
    }
    $this->deleteAllRelatedObjects();

//    T::cc('frontend');

//    return $this->getNode()->delete();
    return parent::delete($conn);
  }

  public function deleteAllRelatedObjects()
  {
    $objects = ArticleFileTable::getInstance()->createQuery()->andWhere('file_id = ?', $this->getPrimaryKey())->execute();
    foreach ($objects as $object) {
      $object->delete();
    }
  }

  public function getIndentedName()
  {
    return str_repeat('- ', $this->getLevel()) . ' ' . $this->getName();
  }

  //Zwraca rozszerzenie pliku - potrzebne do slugowania :)
  public function getExtension()
  {
    return pathinfo($this->getFile(), PATHINFO_EXTENSION);
  }

  public function isFile()
  {
    return $this->getFile() ? true : false;
  }

  /**
   * Ta metoda jest po to, żeby ograniczyć zapytania, które powstają przy getNode()->hasChildren()
   */
  public function hasChildren() {
    return $this->getRgt() - $this->getLft() > 1;
  }

  public function getFileIco()
  {

    if (file_exists(sfConfig::get('sf_web_dir') . '/images/file_icons/' . $this->getExtension() . '.png'))
    {
      return sfConfig::get('sf_web_root') . '/images/file_icons/' . $this->getExtension() . '.png';
    }
    else
    {
      return sfConfig::get('sf_web_root') . '/images/file_icons/default.png';
    }
  }

  static public function getOptionsList()
  {
    $files = Doctrine::getTable('Files')->findAll();
    $return = array();
    foreach ($files as $file)
    {
      $return[$file->getPrimaryKey()] = $file;
    }
    return $return;
  }

}
