<?php

/**
 * Galleries
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Galleries extends BaseGalleries
{
    /**
     * SAVES TRANSLATIONS
     */
    public function initalizeTranslations() {
      foreach(Lang::getInstance()->getAll()->toArray() as $lang) { //foreach language
        $this->Translation[$lang]; //nic z tym nie robię - wystarczy, że to się zainicjalizuje w obiekcie
      }
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $this->initalizeTranslations(); // żeby zapisały się wersje językowe
        
        T::cc('frontend');
        DoctrineBugfixesclass::generateSlugOnUpdatedObjectWithI18n($this, $conn, 'name');

        if ($this->isNew()) { $this->Metas = Metas::createAndSave(); }

        $r = parent::save($conn);
        $this->Metas->generateMetas($this);
        return $r;
    }

    public function __toString()
    {
        return $this->getName();
    }

    public function getPicturesCount()
    {
      return $this->getWithPicturesQuery()->count();
//      return ($this->Pictures) ? count($this->Pictures) : 0;
    }

    public function getPicturesWithLimit($limit)
    {
      return $this->getWithPicturesQuery($limit)->execute();
    }


    public function hasPictures() {
      return $this->getPicturesCount() ? true : false;
    }

    public function getAnyPictureExcept($picture) {
      $q = Doctrine_Query::create()
              ->from('Pictures p')
              ->addWhere('p.gallery_id = ?', $this->getPrimaryKey())
              ->addWhere('p.picture_id != ?', $picture->getPrimaryKey())
              ;
      return $q->fetchOne();
    }

    public function setDefaultPictureAnyExcept($picture) {
      if ($picture2 = $this->getAnyPictureExcept($picture)) {
        $this->setDefaultPicture($picture2);
        $this->save();
      }
    }

    public function getDefaultPicture()
    {
        $tmp = $this->getPictures();        
        if(count($tmp) > 0)
        {
            if(!$this->getDefaultPictureId())
            {
                //$this->setDefaultPictureAnyExcept($tmp[0]);
              return false;
            }

            $q = Doctrine_Query::create()
                ->from('Pictures p')
                ->where('picture_id =?', $this->getDefaultPictureId());
            return $q->fetchOne();
        }
        else
        {
            return false;
        }

    }

    public function getWithPictures()
    {
        return Doctrine::getTable('Galleries')->getWithPictures();
    }

    public function getWithPicturesQuery($limit = NULL)
    {
        $q = Doctrine_Query::create()
                ->from('Pictures p')
                ->orderBy('p.created_at ASC')
                ->where('p.gallery_id = ?', $this->getGalleryId());

        if ($limit) {
          $q->limit($limit);
        }

        return $q;
    }


    public function getPicturesWithoutDefault()
    {
        $q = Doctrine_Query::create()
            ->from('Pictures p')
            ->where('p.gallery_id =?', $this->getPrimaryKey())
            ->andWhere('p.picture_id !=?', $this->getDefaultPictureId());
        return $q->execute();
    }

    public function delete(Doctrine_Connection $conn = null)
    {
      if ($this->getIsDeletable() ) {

        $comments = $this->getComments();
        Comments::removeComments($comments);

        $pictures = $this->getPictures();
        foreach ($pictures as $picture)
        {
            $picture->delete();
        }

        Metas::deleteByObject($this);

        Menus::clearMenuIfNeeded($this);
        T::cc('frontend');
        return parent::delete($conn);
      }
    }
    
    public function removeDefaultPictureForce()
    {
      $q = Doctrine_Query::create()
          ->update('Galleries')
          ->set('default_picture_id', 'null')
          ->where('gallery_id =?', $this->getPrimaryKey())
          ->execute();
      return true;
    }
}
