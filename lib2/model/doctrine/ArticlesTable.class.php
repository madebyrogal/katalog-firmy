<?php

/**
 * ArticlesTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ArticlesTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ArticlesTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Articles');
    }

    public function queryActive()
    {
        $q = Doctrine_Query::create()
                ->from('Articles a')
                ->andWhere('a.is_public = ?', true);

        return $q;
    }

    public function getArticle($id)
    {
        $q = $this->queryActive()
                ->addWhere('a.article_id = ?', $id)
                ;

        return $q->execute();
    }

    public function getOptionsList()
    {
      $objects = $this->queryRealArticles()->execute();
      $return = array();
      foreach($objects as $object) {
        $return[$object->getPrimaryKey()] = $object->__toString();
      }
      return $return;
    }

    public function queryRealArticles($q = null)
    {
        if (!$q) {
          $q = $this->createQuery('a');
        }
        $q->leftJoin('a.ArtCategories ac');
        $q->addWhere('ac.root_id = ?', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey('ARTICLES_TREE'));

        return $q;
    }

    public function queryActiveRealArticles()
    {
        $q = $this->queryActive();
        $q = $this->queryRealArticles($q);

        return $q;
    }

    public function queryCatalogProducts($q = null)
    {
        if (!$q) {
          $q = $this->createQuery('a');
        }
        $q->leftJoin('a.ArtCategories ac');
        $q->addWhere('ac.root_id = ?', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey('CATALOG_TREE'));

        return $q;
    }

    public function queryActiveCatalogProducts()
    {
        $q = $this->queryActive();
        $q = $this->queryCatalogProducts($q);

        return $q;
    }

    public function getProdustsIds()
    {
        $catalog = ArtCategoriesTable::getInstance()->getRootIdByTreeKey('CATALOG_TREE');
        
        $products = ArtCategoriesTable::getInstance()->find($catalog)->queryActiveProducts()->fetchArray();
        $result = array();
        foreach($products as $product)
        {
            $result[] = $product['article_id'];
        }
        return $result;
    }

    public function fetchByArtCategoryRecordKey($art_category_record_key, $limit = null, $orderBy = null)
    {
      $q = $this->queryActive()
              ->leftJoin('a.ArtCategories ac')
              ->addWhere('ac.record_key = ?', $art_category_record_key)
              ;

      if ($limit) {
        $q->limit($limit);
      }

      if ($orderBy) {
        $q->orderBy($orderBy);
      }

      return $q->execute();
    }

    static function setDefaultArtcategoryFromOther($category_id)
    {
        $q = Doctrine_Query::create()
                ->update('Articles')
                ->set('category_id', '?', 1)
                ->where('category_id = ?', $category_id);

        return $q->execute();
    }

    public function getLastArticles($cat = 0, $max = 5)
    {
        if($cat > 0)
        {
            $q = Doctrine_Query::create()
                    ->from('Articles')
                    ->where('artcategory_id = ?', $cat)
                    ->andWhere('is_public = ?', true)
                    ->orderBy('created_at DESC')
                    ->limit($max);
        } else {
            $q = Doctrine_Query::create()
                    ->from('Articles')
                    ->andWhere('is_public = ?', true)
                    ->orderBy('created_at DESC')
                    ->limit($max);
        }

        return $q->execute();
    }

    public function getLastArticlesByRecordKey($in_key, $exclude_key = null, $max = 5)
    {
        $q = Doctrine_Query::create()
                ->from('Articles a')
                ->leftJoin('a.ArtCategories ac');

        if(!is_array($in_key))
            $in_key = array($in_key);
        
        if(isset($exclude_key) && !is_array($exclude_key))
            $exclude_key = array($exclude_key);
        
        if($in_key) {
            $q->whereIn('ac.record_key', $in_key);
        }

        if($exclude_key) {
            $q->andWhereNotIn('ac.record_key', $exclude_key);
        }

        $q->andWhere('a.is_public = ?', true)
            ->orderBy('a.created_at DESC')
            ->limit($max);

        return $q->execute();
    }

    public function getFirst()
    {
        $q = Doctrine_Query::create()
                ->from('Articles')
                ->andWhere('is_public = ?', true)
                ->orderBy('created_at')
                ->limit(1);

        $collection = $q->execute();

        return $collection[0];
    }

    public function findByKeyName($key, $limit = false)
    {
        $catalog = ArtCategoriesTable::getInstance()->findOneByTreeKey('CATALOG_TREE');
        $q = $catalog->queryActiveProducts();
        $q->leftJoin('a.CatalogFlag cf');
        $q->where('cf.key_name =?', $key);

        if((int)$limit > 0)
        {
            $q->limit($limit);
        }

        return $q->execute();
    }

    public function doSelectForSlug($parameters)
    {
      if (isset($parameters['sf_culture'])) {
        return $this->findOneBySlugAndCulture($parameters['slug'], $parameters['sf_culture']);
      }
      else {
        return $this->findOneBySlugAndCulture($parameters['slug']);
      }
    }

    public function findOneBySlugAndCulture($slug, $culture = 'pl')
    {
        $q = $this->createQuery('a')
                ->leftJoin('a.Translation t')
                ->andWhere('t.lang = ?', $culture)
                ->andWhere('t.slug = ?', $slug);
        return $q->fetchOne();
    }

    public function findForSlug($parameters)
    {
        $q = $this->createQuery('a')
                ->andWhere('a.slug = ?', $parameters['slug'])
                ->andWhere('a.article_id != ?', $parameters['article_id']);
        return $q->fetchOne();
    }

    public function retrieveArticlesList(Doctrine_Query $q)
    {
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.ArtCategories a');
        $q->leftJoin($rootAlias . '.sfGuardUser g');
        $q->leftJoin($rootAlias . '.Translation t');
//        $q->addWhere('a.root_id = ?', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey('ARTICLES_TREE'));
        $q->andWhereIn('a.root_id', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey( array(
            'ARTICLES_TREE',
            'SECURE_ART_CATEGORY_INSTALLER', //solver - to jest współdzielone i musi zostać, dopóki nie zrobimy refactoringu
            'SECURE_ART_CATEGORY_DESIGNER',  //solver - to jest współdzielone i musi zostać, dopóki nie zrobimy refactoringu
            'SECURE_ART_CATEGORY_USER',  //solver - to jest współdzielone i musi zostać, dopóki nie zrobimy refactoringu
            'SECURE_ART_CATEGORY_SERVICEMAN' //solver - to jest współdzielone i musi zostać, dopóki nie zrobimy refactoringu
            )));

        return $q;   
    }

    public function retrieveProductsList(Doctrine_Query $q)
    {
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.ArtCategories a');
        $q->leftJoin($rootAlias . '.sfGuardUser g');
        $q->addWhere('a.root_id = ?', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey('CATALOG_TREE'));

        return $q;
    }

    public function findAllByTreeKey($treeKey)
    {
        $q = $this->queryActive();
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.ArtCategories ac');
        $q->leftJoin($rootAlias . '.sfGuardUser g');
        $q->addWhere('ac.root_id = ?', Doctrine::getTable('ArtCategories')->getRootIdByTreeKey($treeKey));
        
        return $q->execute();
    }

    public function getRandomArticlesByCategory($category_id = null, $limit = 1)
    {
        $q = $this->queryActive();
        $q->select('article_id, RAND() as rand');
        $q->leftJoin('a.Translation t');
        $q->leftJoin('a.Galleries g');
        $q->leftJoin('g.Pictures p');
        if($category_id)
        {
            $q->where('a.artcategory_id =?', $category_id);
        }
        else
        {
            $q->where('a.is_deletable =?', false);
            $q->where('a.is_editable =?', false);
        }
        $q->limit($limit);

        if($limit == 1)
        {
            return $q->fetchOne();
        }
        else
        {
            return $q->execute();
        }

    }

    /**
     * zwraca tagi danego artykulu
     * @param int $id id artykulu
     * @return Doctrine_Collection lista tagow
     */
    public function getTags($id) {
        $q = Doctrine_Query::create()
             ->from('Tag t')
             ->leftJoin('t.Articles a')
             ->where('a.article_id = ?', $id);

        return $q->execute();
    }

    public function getUrlByRecordKey($record_key) {
      $article = $this->findOneByRecordKey($record_key);
      sfContext::getInstance()->getConfiguration()->loadHelpers(array('Url'));
      return $article ? url_for('articles_show', $article) : '';
    }

    /**
     * zwraca liste wydarzen z danego miesiaca danego roku
     * @param int $month miesiac
     * @param int $year rok
     * @return array tablica wydarzen (dzien => array(tytul, opis, data poczatku, data konca))
     */
    public function getEventsByMonthAndYear($month, $year) {
        $start = mktime(0, 0, 0, $month, 1, $year);
        $end = mktime(23, 59, 59, $month, cal_days_in_month(0, $month, $year), $year);

        $con = Doctrine_Manager::getInstance()->connection();
        $st = $con->execute('
                    SELECT
                            p.article_id AS article_id,
                            p.is_public AS article_is_public,
                            p2.id AS field_id,
                            p2.name AS field_name,
                            p2.type AS field_type,
                            p2.record_key AS field_record_key,
                            p3.value AS value,
                            p4.title AS title,
                            p4.content AS content
                    FROM prefix_articles p
                    LEFT JOIN prefix_article_custom_field_values p3 ON (p.article_id = p3.article_id)
                    LEFT JOIN prefix_article_custom_field p2 ON p2.id = p3.field_id
                    LEFT JOIN prefix_articles_translation p4 ON p.article_id = p4.article_id
                    WHERE (p2.type = ?)
                    AND p.is_public = 1
                    AND p4.lang = ?
                    AND (p2.record_key IN(?, ?))
                    AND p3.value >= ? AND p3.value <= ?', array('TYPE_DATE', 'pl', 'START_DATE', 'END_DATE', $start, $end));

        $retArray = array();

        foreach($st->fetchAll() as $event) {

            if(!isset($retArray[$event['article_id']])) {
                $retArray[$event['article_id']] = array(
                        'title' => $event['title'],
                        'desc' => $event['content']
                    );
}

            if($event['field_record_key'] == 'START_DATE') {
                $retArray[$event['article_id']]['start'] = $event['value'];
                $retArray[$event['article_id']]['start_formated'] = date('j.m.Y, H:i', $event['value']);
            } else if($event['field_record_key'] == 'END_DATE') {
                $retArray[$event['article_id']]['end'] = $event['value'];
                $retArray[$event['article_id']]['end_formated'] = date('j.m.Y, H:i', $event['value']);
            }
        }

        return $retArray;
    }
}