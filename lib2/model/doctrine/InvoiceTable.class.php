<?php

/**
 * InvoiceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class InvoiceTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object InvoiceTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Invoice');
    }
    
    public function setInvoiceFromOrder(Order $order)
    {        
        if($order->getIsPaid() == true && !$order->getInvoice()->getPrimaryKey() && $order->getPacket() == 1)
        {
            $company = $order->getCompany();
            $profile = $order->getProfile();

            $invoice = new Invoice();

            $date = date('Y-m-d H:i:s');
            $invoice->setSellByDate($date);
            $invoice->setInvoiceDate($date);

            $invoice->setPlaceOfIssue(stgConfig::get('invoice_place_of_issue'));


            $seller = stgConfig::get('invoice_seller_name') . '

' . stgConfig::get('invoice_seller_city') . '
ul. ' . stgConfig::get('invoice_seller_street') . '
' . stgConfig::get('invoice_seller_code') . '
NIP: ' . stgConfig::get('invoice_seller_nip');

            $invoice->setSeller($seller);

            

            $buyer = $profile->getName() . '

' . $profile->getCity() . '
ul. ' . $profile->getStreet() . '
' . $profile->getPostCode() . '
NIP: ' . $profile->getNip()
      ;

            $invoice->setBuyer($buyer);
            $invoice->setServiceName('Dodanie firmy do serwisu katalog-firmy.net');
            
            $price_netto = new StgPrice($order->getValueNetto());
            $price_brutto = new StgPrice($order->getValueBrutto());
            $vat_amount = new StgPrice($price_brutto->asIs() - $price_netto->asIs());
            
            $invoice->setNet($price_netto->asReal());
            $invoice->setGrossValue($price_brutto->asReal());

            $invoice['vat'] = '23%';
            $invoice['vat_rate'] = 'Podstawowy podatek 23%';
            $invoice['vat_amount'] = $vat_amount->asReal();
            $invoice['total_price'] = $price_brutto->asReal();
            $invoice['words'] = $price_brutto->asWords();
            $invoice['paid_by_bank_transfer'] = 'ZapÅ‚acono przelewem';
            $invoice['exhibited'] = stgConfig::get('invoice_seller_name');
            $invoice['received'] = $profile->getGuardUser()->getFirstName().' '.$profile->getGuardUser()->getLastName();

            $invoice->save();

            $order->setInvoice($invoice);
            $order->save();
            
            $order_rent_to = strtotime($order->getRentTo());
            $company_rent_to = strtotime($company->getRentTo());
            
            if($order_rent_to > $company_rent_to)
            {
                $company->setRentTo($order->getRentTo());
            }
            
            $company->setIsPaid(true);
            $company->save();
            
            $message = Message::getMessageByKey('is_paid');
            T::systemMail($order->getProfile()->getGuardUser()->getEmailAddress(), $message->getName(), $message->getContent());

        }
        return true;
    }

    public function getInvoicesByUser(Profile $profile)
    {
        $q = Doctrine_Query::create()
            ->from('Invoice i')
            ->leftJoin('i.Order o')
            ->where('o.profile_id =?', $profile->getPrimaryKey());

        $invoices = $q->execute();

        if(count($invoices) >  0)
        {
             return $invoices;
        }
        else
        {
             return 0;
        }
    }

    public function getIsValidateInvoiceByUser(Invoice $invoice, Profile $profile)
    {
        $cnt = Doctrine_Query::create()
            ->from('Invoice i')
            ->leftJoin('i.Order o')
            ->where('o.profile_id =?', $profile->getPrimaryKey())
            ->andWhere('i.id =?', $invoice->getPrimaryKey())
            ->count();
        
        if($cnt == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}