<?php

/**
 * Message
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Message extends BaseMessage
{
    public static function getDefaultMessages()
    {
      return array(
        'mail_order' => array(
            'description' => 'Mail do klienta po złożeniu nowego zamówienia',
            'name' => 'Dziękujemy za złożenie zamówienia',
            'content' => '<p>Szanowni Państwo, <br /><br /> W każdej chwili możliwe jest przejście do płatności on-line: <br /> {link_platnosci}</p>
<p>{tabela_adresy}</p>
<p>{tabela_produkty}</p>
<p>{tabela_forma_rozliczenia}</p>
<p>{tabela_uwagi}</p>
<p>Link do śledzenia zam&oacute;wienia:&nbsp;<br /> {link_sledzenia}</p>'
        ),
        'summary_order' => array(
            'description' => 'Wiadomość wyświetlana w podsumowaniu zamówienia (z linkiem do płatności online)',
            'name' => 'Podsumowanie zamówienia',
            'content' => '<p>Dziękujemy za złożenie zam&oacute;wienia.</p>
<p>{tabela_adresy}</p>
<p>{tabela_produkty}</p>
<p>{tabela_forma_rozliczenia}</p>
<p>{tabela_uwagi}</p>
<p>Link do śledzenia zam&oacute;wienia:&nbsp;<br />{link_sledzenia}</p>
<p>W razie jakichkolwiek pytań lub wątpliwości, jesteśmy do Państwa dyspozycji.</p>'
        ),
        'payable_success' => array(
            'description' => 'Dziękujemy za dokonanie płatności',
            'name' => 'Dziękujemy za dokonanie płatności',
            'content' => '<p>Twoje zamówienie zostanie przekazane do realizacji.</p>'
        ),
        'payable_error' => array(
            'description' => 'Błąd płatności',
            'name' => 'Błąd płatności',
            'content' => '<p>Przepraszamy - wystąpił błąd płatności. Jeśli masz pytania lub wątpliwości, skontaktuj się z nami.</p>'
        ),
        'admin_order' => array(
            'description' => 'Mail do administratora po złożeniu nowego zamówienia',
            'name' => 'Nowe zamówienie: {nr_zamowienia} / {nazwa_uzytkownika} / {wartosc_brutto}',
            'content' => '<p>Zamówienie <strong>{nr_zamowienia}</strong> od klienta <strong>{nazwa_uzytkownika}</strong>:</p>
<p>{tabela_adresy}</p>
<p>{tabela_produkty}</p>
<p>{tabela_forma_rozliczenia}</p>
<p>{tabela_uwagi}</p>'
        )
      );
    }

    public function save(Doctrine_Connection $conn = null)
    {
        T::cc('frontend');
        return parent::save($conn);

    return parent::save($conn);
  }

    public function delete(Doctrine_Connection $conn = null)
    {
        T::cc('frontend');
        return parent::delete($conn);
    }

    public static function send($message_name, $options = array())
    {
      //adres email odbiorcy
      $to = isset($options['to']) ? $options['to'] : Contact::getContactEmail();

      //wiadomosc po oborbce
      $message = self::prepare($message_name, $options);

      //wyslij
      T::systemMail($to, $message->getName(), $message->getContent());
    }

    public static function prepare($message_name, $options = array())
    {
      //wartosci do podmiany na podstawie obiektu
      $values = isset($options['object']) ? $options['object']->getMessageValues() : array();

      //pobieranie wiadomosci + obrobka (podmiana)
      $message = Message::getMessageByKey($message_name, $values);

      return $message;
    }

    public static function getOrCreateDefaultMessage($key)
    {
      $q = Doctrine_Query::create()
        ->from('Message')
        ->where('message = ?', $key);

      //jesli taka wiadomosc jeszcze nie istnieje to stworz domyslna
      if (!$message = $q->fetchOne()) {
        $default_messages = self::getDefaultMessages();

        $message = new Message();
        $message->setMessage($key);

        if (isset($default_messages[$key])) {
          $message->setDescription($default_messages[$key]['description']);
          $message->setName($default_messages[$key]['name']);
          $message->setContent($default_messages[$key]['content']);
        }

        $message->save();
      }

      return $message;
    }

    public static function getMessageByKey($key, $values = array())
    {
        //pobieranie lub tworzenie rekordu wiadomosci
        $message = self::getOrCreateDefaultMessage($key);

        //podmiana wartosci
        $message = self::setMessageValues($message, $values);
        return $message;
    }

    static function setMessageValues($message, $values)
    {
        $content = $message->getContent();
        $name = $message->getName();
        foreach($values as $key => $value)
        {
//            $content = ereg_replace('{'.$key.'}',$value,$content);
//            $name = ereg_replace('{'.$key.'}',$value,$name);
            $content = preg_replace('/{'.$key.'}/',$value,$content);
            $name = preg_replace('/{'.$key.'}/',$value,$name);
        }
        $message->setContent($content);
        $message->setName($name);
        return $message;
    }

      public static function getValuesFromOrder($order)
      {
          $result = array();

          $result['nr_zamowienia'] = $order->getPrimaryKey();
          $result['nazwa_uzytkownika'] = $order->getInvoiceAddress()->getName();

          $price_netto = new StgPrice($order->getValueNetto());
          $price_brutto = new StgPrice($order->getValueBrutto());
          
          $result['wartosc_netto'] = $price_netto->asReal();
          $result['wartosc_brutto'] = $price_brutto->asReal();

          return $result;
      }
}
