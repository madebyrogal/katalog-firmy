<?php

/**
 * Articles
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Articles extends BaseArticles
{
    public function getContent()
    {
      $content = $this->baseGetContent();
      $content = '<div class="article_content_wrapper" style="clear: both">'.$this->baseGetContent().'</div>';

      if (Gadget::isPossibleHere('GADGET_FACEBOOK_LIKE')) {
        $content = $this->gadgetFacebookLikeAdd($content);
      }
      if (Gadget::isPossibleHere('GADGET_TWITTER_LIKE')) {
        $content = $this->gadgetTwitterLikeAdd($content);
      }

      return $content;
    }

    public function baseGetContent()
    {
      return $content = $this->_get('content');
    }

    public function gadgetFacebookLikeAdd($content = '')
    {
      if ($facebook_like = $this->getCustomFieldValueByRecordKey('FACEBOOK_LIKE')) {
        switch ($facebook_like->getValue()) {
          case 'FACEBOOK_LIKE_SHOW':
            $content = $content . $this->getFacebookLikeHTML();
            break;

//          case 'FACEBOOK_LIKE_TOP':
//            $content = $this->getFacebookLikeHTML() . $content;
//            break;

//          case 'FACEBOOK_LIKE_BOTTOM':
//            $content = $content . $this->getFacebookLikeHTML();
//            break;
//
//          case 'FACEBOOK_LIKE_TOP_BOTTOM':
//            if ($content != '') {
//              $content = $this->getFacebookLikeHTML() . $content;
//            }
//            $content .= $this->getFacebookLikeHTML();
//            break;

          default:
          break;
        }
      }
      return $content;

    }

    public function gadgetTwitterLikeAdd($content = '')
    {
      if ($twitter_like = $this->getCustomFieldValueByRecordKey('TWITTER_LIKE')) {
        switch ($twitter_like->getValue()) {
          case 'TWITTER_LIKE_SHOW':
            $content = $content . $this->getTwitterLikeHTML();
            break;
          
//          case 'TWITTER_LIKE_TOP':
//            $content = $this->getTwitterLikeHTML() . $content;
//            break;
//
//          case 'TWITTER_LIKE_BOTTOM':
//            $content = $content . $this->getTwitterLikeHTML();
//            break;
//
//          case 'TWITTER_LIKE_TOP_BOTTOM':
//            if ($content != '') {
//              $content = $this->getTwitterLikeHTML() . $content;
//            }
//            $content .= $this->getTwitterLikeHTML();
//            break;

          default:
          break;
        }
      }
      return $content;

    }

    public function getFacebookLikeHTML()
    {
      sfContext::getInstance()->getConfiguration()->loadHelpers(array('Url'));
      return '<iframe src="http://www.facebook.com/plugins/like.php?href='.htmlentities(url_for('articles_show', $this, true)).'&amp;layout=standard&amp;show_faces=false&amp;width=450&amp;action=like&amp;font=arial&amp;colorscheme=light&amp;height=35" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height:35px;" allowTransparency="true"></iframe>';
    }

    public function getTwitterLikeHTML()
    {
      sfContext::getInstance()->getConfiguration()->loadHelpers(array('Url'));
      return '<div class="tweet_button"><a href="http://twitter.com/share" class="twitter-share-button" data-url="'.htmlentities(url_for('articles_show', $this, true)).'" data-count="none">Tweet</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script></div>';
    }

    public function getDefaultPicture()
    {
      foreach ($this->getGalleries() as $gallery) {
        if ($gallery->hasPictures()) {
          return $gallery->getDefaultPicture();
        }
      }

      return null;
    }

    public function getVersionByPk($pk)
    {
        $q = Doctrine_Query::create()
            ->from('ArticlesVersion av')
            ->leftJoin('av.Translation t')
            ->where('av.article_id = ?', $this->getPrimaryKey())
            ->andWhere('av.article_version_id = ?', $pk)
            ->limit(1);

        return $q->fetchOne();
    }

    public function getArticlesVersion()
    {
        $q = Doctrine_Query::create()
            ->from('ArticlesVersion av')
            ->leftJoin('av.Translation t')
            ->where('av.article_id = ?', $this->getPrimaryKey())
            ->orderBy('created_at desc');
        return $q->execute();
    }

    public function hasArtCategory($value, $field)
    {
        return $this->getArtCategories()->hasArtCategory($value, $field);
    }

    public function getActiveVersion()
    {
        $articleVersion = Doctrine_Query::create()
            ->from('ArticlesVersion av')
            ->leftJoin('av.Translation t')
            ->where('av.article_id = ?', $this->getPrimaryKey())
            ->andwhere('av.is_active = ?', true)
//            ->limit(1)
            ->fetchOne();
            ;

//        if (! $articleVersion) {
//          $articleVersion = ArticlesVersion::saveVersion($this, true);
//        }
            
        return $articleVersion;
    }

    public function getProfile()
    {
        return $this->getsfGuardUser();
    }

    public function setPublic($f)
    {
        $this->setIsPublic($f);
        $this->save();
    }

    public function getAncestorsCategoriesArrayByIds() { //TODO: DRY
      $return = array();

//      foreach ($this->getArtCategories() as $category) {
      $category = $this->getArtCategories();
        $ancestors = $category->getAncestorsArrayByIds();
        foreach ($ancestors as $ancestor) {
          $return[$ancestor->getPrimaryKey()] = $ancestor;
        }
//      }
      return $return;
    }

    public function renderCategoriesLinks() {
      return $this->getArtCategories()->renderLinkWithAncestors();
    }

    public function isPublic($lang)
    {
        return $this->getIsPublic() && Lang::checkIsActive($lang);
    }

    public function getCategorySlug()
    {
        $artcategory = $this->getArtCategories();
//        return $artcategory->getSlug();
        return $artcategory->Translation[sfContext::getInstance()->getUser()->getCulture()]['slug'];
    }

    public function delete(Doctrine_Connection $conn = null)
    {
      if ($this->getIsDeletable()) {

        Menus::clearMenuIfNeeded($this);
        Search::deleteSearchIndex(get_class($this), $this->getPrimaryKey());

        Metas::deleteByObject($this);

        T::cc('frontend');
        return parent::delete($conn);
      }
    }

    public function ReturnToActiveVersion()
    {
        $version = $this->getActiveVersion();
        $this->setAuthorId($version->getAuthorId());
        $this->setArtcategoryId($version->getArtcategoryId());
        $langs = Lang::getInstance()->getAll()->toArray();
        foreach($langs as $lang)
        {
            $this->Translation[$lang]['content']  =   $version->Translation[$lang]['content'];
            $this->Translation[$lang]['title']  =   $version->Translation[$lang]['title'];
            $this->Translation[$lang]['is_lang_active']  =   $version->Translation[$lang]['is_lang_active'];
        }
        $conn = $this->Table->getConnection();
        $this->save($conn, false);
    }


    /**
     * SAVES TRANSLATIONS
     */
    public function initalizeTranslations() {
      foreach(Lang::getInstance()->getAll()->toArray() as $lang) { //foreach language
        $this->Translation[$lang]; //nic z tym nie robię - wystarczy, że to się zainicjalizuje w obiekcie
      }
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $this->initalizeTranslations(); // żeby zapisały się wersje językowe
        $is_new = $this->isNew();
        
        $langs = Lang::getInstance()->getAll()->toArray();   //gets languages
        $forSearch = array();
        foreach($langs as $lang)    //foreach language
        {
            $forSearch[$lang] = array();
            $forSearch[$lang][] = $this->Translation[$lang]['content'];    //sets translation's content
            $forSearch[$lang][] = $this->Translation[$lang]['title'];
        }
        
        /**
         * THEN SAVES VIA TRANSACTION
         */
        $conn = $conn ? $conn : $this->getTable()->getConnection();
        $conn->beginTransaction();
        try
        {
            DoctrineBugfixesclass::generateSlugOnUpdatedObjectWithI18n($this, $conn, 'title');

            if ($is_new) { $this->Metas = Metas::createAndSave(); }

            $ret = parent::save($conn);
            
            $this->Metas->generateMetas($this);

            //SAVES WHOLE SEARCH INDEX
            foreach($langs as $lang) {
              Search::saveSearchIndex($forSearch[$lang], $this, $lang);
            }

            T::cc('frontend');  //XXX: CLEARS CACHE
            $conn->commit();

            if ($is_new) {
              ArticlesVersion::saveVersion($this);
            }
            return $ret;
        }
        catch (Exception $e)
        {
            $conn->rollBack();
            throw $e;
        }

    }


    public function deleteVersions()
    {
        $versions = $this->getArticlesVersion();
        foreach($versions as $version)
        {
            $version->delete();
        }
        return true;
    }

    public function getTags() {
        return Doctrine::getTable('Articles')->getTags($this->getPrimaryKey());
}

    public function addTag($tag) {
        $tagObj = Doctrine::getTable('Tag')->findOneByName($tag);

        if(!$tagObj) {
            // tag nie istnieje jeszcze
            $tagObj = new Tag();
            $tagObj->name = $tag;
            $tagObj->save();
        }

        if(!Doctrine::getTable('Article2Tag')->find(array($this->getPrimaryKey(), $tagObj->getPrimaryKey()))) {

            $article2tag = new Article2Tag();
            $article2tag->article_id = $this->getPrimaryKey();
            $article2tag->tag_id = $tagObj->getPrimaryKey();
            $article2tag->save();
        }

    }

    public function removeTag($tag) {
        $tagObj = Doctrine::getTable('Tag')->findOneByName($tag);

        $q = Doctrine_Query::create()
                ->delete('Article2Tag a')
                ->where('a.tag_id = ?', $tagObj->getPrimaryKey())
                ->andWhere('a.article_id = ?', $this->getPrimaryKey());

        return $q->execute();
    }

    /**
     * zwraca pole wlasne artykulu
     * @param string $field zwraca pole
     */
    public function getCustomFieldValue($field) {
        $customFieldValue = Doctrine::getTable('ArticleCustomFieldValue')->getByArticleAndName($this, $field);
        return $customFieldValue ? $customFieldValue->getValue() : '';
    }

    /**
     * Ustawia wartosc pola. Jezeli pole nie istnieje to je tworzy
     * @param string $field pole
     * @param string $value wartosc
     * @param type typ pola
     */
    public function setCustomField($field, $value, $type = 'TYPE_STRING') {

        $fieldObj = Doctrine::getTable('ArticleCustomField')->findOneByName($field);

        if(!$fieldObj) {
            // pole nie istnieje
            // to na przyszlosc, gdy dojdzie mozliwosc samodzielnego definiowania pol przez usera
//            $fieldObj = new ArticleCustomField();
//            $fieldObj->name = $field;
//            $fieldObj->type = $type;
//            $fieldObj->save();

            return;
        }

        if(!$article2customFieldValue = Doctrine::getTable('ArticleCustomFieldValue')->find(array('article_id' => $this->getPrimaryKey(),
                                                                                                  'field_id' => $fieldObj->getPrimaryKey()))) {
            $article2customFieldValue = new ArticleCustomFieldValue();
        }

        $article2customFieldValue->article_id = $this->getPrimaryKey();
        $article2customFieldValue->field_id = $fieldObj->getPrimaryKey();

        if($fieldObj->type == 'TYPE_DATE') {
            //0 - rok, 1 - miesiac, 2 - dzien, 3 - godzina, 4 - minuty, 5 - sekundy
            $time = preg_split('/[\s-:]+/', $value);
            $value = mktime($time[3], $time[4], $time[5], $time[1], $time[2], $time[0]);
        }

        $article2customFieldValue->value = $value;

        $article2customFieldValue->save();

    }

    /**
     * zwraca wszystkie pola wlasne przypisane do artykulu
     * @return Doctrine_Collection pola wlasne
     */
    public function getCustomFields() {
        return Doctrine::getTable('ArticleCustomFieldValue')->getCustomFields($this);
    }

    /**
     * zwraca pole wlasne przypisane do artykulu
     * @param string name nazwa pola
     * @return Doctrine_Collection pola wlasne
     */
    public function getCustomFieldValueByName($name) {
        return Doctrine::getTable('ArticleCustomFieldValue')->getByArticleAndName($this, $name);
    }

    /**
     * zwraca pole wlasne przypisane do artykulu po record key
     * @param string record key record key pola
     * @return Doctrine_Collection pola wlasne
     */
    public function getCustomFieldValueByRecordKey($record_key) {
        return Doctrine::getTable('ArticleCustomFieldValue')->getByArticleAndRecordKey($this, $record_key);
    }

    /**
     * sprawdza, czy artykul ma przypisane pola wlasne
     * @return boolean czy artykul ma przypisane pola
     */
    public function hasCustomFields() {
        $q = Doctrine::getTable('ArticleCustomFields2ArtCategories')
                ->createQuery()
                ->where('artcategory_id = ?', $this->ArtCategories->getPrimaryKey());

        return $q->execute() == null;
    }
//
//    /**
//     * generuje tablice w javascrip okreslajaca, ktora kategoria ma jakie pola wlasne
//     */
//    public static function generateJs() {
//
//        $q = Doctrine::getTable('ArticleCustomFields2ArtCategories')
//                ->createQuery('cf2ac')
//                ->leftJoin('cf2ac.ArticleCustomField acf')
//                ->orderBy('artcategory_id DESC');
//
//        $refTable = $q->execute();
//
////        $arrJs = '';
//        $arrJs = array();
//
//        foreach($refTable as $field) {
//            $arrJs[$field->artcategory_id][] = $field->ArticleCustomField->getName();
//        }
//
//        $output = '';
//
//        foreach($arrJs as $catId => $fields) {
//
//            $fieldIds = '';
//            $fields2 = '';
//
//            foreach($fields as $field) {
//                $fields2 .= '"'. $field . '",';
//            }
//
//            $output .= '"'.$catId.'" : ['.trim($fields2, ',').'],';
//        }
//
//        return 'var cat_fields = {' . trim($output, ',') . '}';
//    }

    /**
     * generuje tablice w javascrip okreslajaca, ktora kategoria ma jakie pola wlasne
     */
    public static function generateJs() {

        $q = Doctrine::getTable('ArtCategories')
                ->createQuery('ac')
                ->leftJoin('ac.ArticleCustomFields2ArtCategories cf2ac')
                ->leftJoin('cf2ac.ArticleCustomField acf')
                ->orderBy('ac.lft');

        $artCategories = $q->execute();

        $arrJs_direct = array();

        //tablica pol wlasnych przypisanych bezposrednio do danych kategorii
        foreach($artCategories as $artCategory) {
          $arrJs_direct[$artCategory->getPrimaryKey()] = array();
          foreach ($artCategory->getArticleCustomFields() as $articleCustomField) {
            $arrJs_direct[$artCategory->getPrimaryKey()][] = $articleCustomField->getName();
          }
        }
        
        //tworzenie tablicy-mapy - jakie jest id rodzica danej kategorii?
        $parents_map = array();
        foreach($artCategories as $artCategory) {
          $parent_id = null;
          $rgt_minus_lft = null;
          
          foreach($artCategories as $artCategory2) {
            if ($artCategory2->getLft() < $artCategory->getLft()
             && $artCategory2->getRgt() > $artCategory->getRgt()
             && (!$rgt_minus_lft || $artCategory2->getRgt() - $artCategory2->getLft() < $rgt_minus_lft))
              {
                $parent_id = $artCategory2->getPrimaryKey();
                $rgt_minus_lft = $artCategory2->getRgt() - $artCategory2->getLft();
              }
          }
          $parents_map[$artCategory->getPrimaryKey()] = $parent_id;
        }

        //dodawanie do pol wlasnych przypisanych bezposrednio danej kategorii takze pol wlasnych przodkow
        $arrJs = array();
        foreach($artCategories as $artCategory) {
          $arrJs[$artCategory->getPrimaryKey()] = $arrJs_direct[$artCategory->getPrimaryKey()];
          if ($parent_id = $parents_map[$artCategory->getPrimaryKey()]) {
            foreach ($arrJs_direct[$parent_id] as $arrJsItem)  {
              $arrJs[$artCategory->getPrimaryKey()][] = $arrJsItem;
            }
          }
          if (!count($arrJs[$artCategory->getPrimaryKey()])) {
            unset($arrJs[$artCategory->getPrimaryKey()]);
          }
        }

        $output = '';

        foreach($arrJs as $catId => $fields) {

            $fieldIds = '';
            $fields2 = '';

            foreach($fields as $field) {
                $fields2 .= '"'. $field . '",';
            }

            $output .= '"'.$catId.'" : ['.trim($fields2, ',').'],';
        }

        return 'var cat_fields = {' . trim($output, ',') . '}';
    }

    /**
     * Zapisuje pola wlasne. Wykrzystuje id kategorii by zapisac tylko dozwolone
     * pola
     * @param array $fields tablica z polami (pole => wartosc)
     * @param int $category id kategorii, do ktorej jest zapisywany artykul
     */
    public function saveCustomFields($fields, $category) {
        // usuwanie dotychczasowych powiazan
        if($this->getPrimaryKey()) {
            $q = Doctrine_Query::create()
                    ->delete('ArticleCustomFieldValue acfv')
                    ->where('acfv.article_id = ?', $this->getPrimaryKey());

            $q->execute();
        }

        // pobranie dozwolonych pol na podstawie kategorii
        $q = Doctrine::getTable('ArticleCustomFields2ArtCategories')
                ->createQuery('cf2ac')
                ->leftJoin('cf2ac.ArticleCustomField acf')
//                ->where('artcategory_id = ?', $category);
                ->andWhereIn('artcategory_id', array_keys(Doctrine::getTable('ArtCategories')->find($category)->getAncestorsArrayByIds(true)));

        $validFields = $q->execute();

        foreach($validFields as $validField) {

            foreach($fields as $field => $value) {

                if($field == $validField->ArticleCustomField->getName()) {
                    $this->setCustomField($field, $value);
                }
            }
        }
    }

    /**
     * sprawdza, czy artykul ma powiazanie pliki
     * @return int 0 - nie ma plikow; > 0 - sa pliki
     */
    public function hasFiles() {
        return Doctrine::getTable('ArticleFile')->findByArticleId($this->getPrimaryKey())->count();
    }

    /**
     * zwraca pierwszy powiazany plik
     * @return Doctrine_Record obiekt pliku
     */
    public function getFile() {
        return $this->getFiles()->getFirst();
    }
}
