<?php

/**
 * sfGuardUser
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUser extends PluginsfGuardUser
{
    public function delete(Doctrine_Connection $conn = null)
    {
      if ($this->isDeletable()) {
        parent::delete($conn);
      }
    }

    public function save(Doctrine_Connection $conn = null)
    {
        $is_fixture = count($this->getGroupNames()) ? in_array('Fixtures', array_merge(array(), $this->getGroupNames())) : false ;

        if ($this->isNew() && !$is_fixture) {
          $this->setIsActive(stgConfig::get('system_users_default_is_active'));
        }

        parent::save($conn);

        //Tworzenie Profilu jeśli jeszcze nie ma
        if (!$this->getProfile())
        {
            $profile = new Profile();
            $profile->setGuardUser($this);
            $profile->save($conn);
        }
        else {
          $this->getProfile()->save($conn);
        }

        return $this;
        
    }

    public function unlinkAllUnlinkableGroupsExcept($groups) {
      Doctrine::getTable('sfGuardUserGroup')->unlinkAllUnlinkableGroupsExcept($groups, $this);
    }

    public function isEditable() {
      if ($is_super_admin = sfContext::getInstance()->getUser()->getGuardUser()->getIsSuperAdmin()) {
        return true;
      }

      if ($string = stgConfig::get('sf_guard_user_not_editable')) {
        return !in_array($this->getUsername(), explode(',', $string));
      }
      
      return true;
    }

    public function isShowable() {
      if ($is_super_admin = sfContext::getInstance()->getUser()->getGuardUser()->getIsSuperAdmin()) {
        return true;
      }

      if ($string = stgConfig::get('sf_guard_user_not_showable')) {
        return !in_array($this->getUsername(), explode(',', $string));
      }

      return true;
    }

    public function isDeletable() {
      if ($is_super_admin = sfContext::getInstance()->getUser()->getGuardUser()->getIsSuperAdmin()) {
        return true;
      }

      if ($string = stgConfig::get('sf_guard_user_not_deletable')) {
        return !in_array($this->getUsername(), explode(',', $string));
      }

      return true;
    }

    /**
     * w sfDoctrineGuard jest chyba bug
     */
    public function getGroupNames()
    {
      $this->loadGroupsAndPermissions();
      if (!count($this->_groups)) {
        return array();
      }
      return array_keys($this->_groups);
    }

    static public function getOneByUsername($username)
    {
        $q = Doctrine_Query::create()->from('sfGuardUser u')->where('u.username = ?',$username)->limit(1);
        $users = $q->fetchOne();
        if($users)
        {
            return $users;
        }
        else
        {
            return null;
        }
    }


  /**
   * Sets the user password.
   *
   * @param string $password
   */
  public function setPassword($password)
  {
    if (!$password && 0 == strlen($password))
    {
      return;
    }

//    if (!$salt = $this->getSalt())
//    {
//      $salt = md5(rand(100000, 999999).$this->getUsername());
//      $this->setSalt($salt);
//    }

    $salt = '';

    $modified = $this->getModified();
    if ((!$algorithm = $this->getAlgorithm()) || (isset($modified['algorithm']) && $modified['algorithm'] == $this->getTable()->getDefaultValueOf('algorithm')))
    {
//      $algorithm = sfConfig::get('app_sf_guard_plugin_algorithm_callable', 'sha1');
      $algorithm = stgConfig::get('sf_guard_plugin_algorithm_callable', 'md5');
    }
    $algorithmAsStr = is_array($algorithm) ? $algorithm[0].'::'.$algorithm[1] : $algorithm;
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithmAsStr));
    }
    $this->setAlgorithm($algorithmAsStr);

    $this->_set('password', call_user_func_array($algorithm, array($salt.$password)));
  }

  public function setPasswordHash($password_hash)
  {
    $this->_set('salt', '');
    $this->_set('algorithm', 'md5');
    $this->_set('password', $password_hash);
  }

  public function getProfile()
  {
      return ProfileTable::getInstance()->findOneByGuardUserId($this->getPrimaryKey());
  }

}
