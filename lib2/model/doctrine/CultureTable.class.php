<?php

/**
 * CultureTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CultureTable extends Doctrine_Table
{

    static public $active = false;
    static public $db_translations_enabled = -1;

    /**
     * Returns an instance of this class.
     *
     * @return object CultureTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Culture');
    }

    public function checkIsActive(Culture $object)
    {
        // UWAGA ! przy zmianie uważać, żeby zgodne były metody: checkIsActive(...) i queryActive()
        // Metody te są rozdzielone w celu ograniczenia ilości zapytań.
        return $object->getIsActive() && !$object->getIsDeleted();
    }

//QUERRIES
    public function queryActive()
    {
        if(self::$db_translations_enabled == -1)
        {
            self::$db_translations_enabled = SuperConfig::getSettingBooleanFromDB('translations_enabled', true);
        }
        // jeśli wersje językowe są wyłączone
//      if (! stgConfig::get('translations_enabled')) { // żeby działało także z taska
        if (! self::$db_translations_enabled)
        { 
            return $this->queryDefaultWhenTranslationsNotEnabled();
        }

        // UWAGA ! przy zmianie uważać, żeby zgodne były metody: checkIsActive(...) i queryActive()
        // Metody te są rozdzielone w celu ograniczenia ilości zapytań.
        $q = $this->createQuery('culture');
        $q->addWhere('culture.is_active = ?',true);
        $q->addWhere('culture.is_deleted = ?',false); // jeśli coś jest skasowane, to nie jest aktywne (nawet jeśli flaga is_active = true)
        $q->orderBy('culture.position');

        return $q;
    }

    public function queryAll()
    {
        // jeśli wersje językowe są wyłączone
//      if (! stgConfig::get('translations_enabled')) {
        if (! SuperConfig::getSettingBooleanFromDB('translations_enabled', true))
        { // żeby działało także z taska
            return $this->queryDefaultWhenTranslationsNotEnabled();
        }

        $q = $this->createQuery('culture');
        $q->orderBy('culture.position');

        return $q;
    }

    public function queryNotDeleted()
    {
        // jeśli wersje językowe są wyłączone
//      if (! stgConfig::get('translations_enabled')) {
        if (! SuperConfig::getSettingBooleanFromDB('translations_enabled', true))
        { // żeby działało także z taska
            return $this->queryDefaultWhenTranslationsNotEnabled();
        }

        $q = $this->createQuery('culture');
        $q->addWhere('culture.is_deleted = ?',false);
        $q->orderBy('culture.position');

        return $q;
    }

    public function queryActiveAndNotDefault()
    {
        $q = $this->queryActive();
        $q->offset(1); // główną Culture jest pierwszy rekord przy sortowaniu po polu position (zamiast flagi is_default)
        return $q;
    }

    public function queryNotDeletedAndNotDefault()
    {
        $q = $this->queryNotDeleted();
        $q->offset(1); // główną Culture jest pierwszy rekord przy sortowaniu po polu position (zamiast flagi is_default)
        return $q;
    }

    public function queryDefaultWhenTranslationsNotEnabled()
    {
        $default_culture_primary_key = $this->createQuery('culture')
                ->orderBy('culture.position')
                ->addWhere('culture.is_deleted = ?', false)
                //                ->addWhere('culture.is_active = ?', true)
                ->limit(1)
                ->fetchOne()
                ->getPrimaryKey()
        ;

        $q = $this->createQuery('culture')
                ->addWhere('culture.language = ?', $default_culture_primary_key)
        ;

        return $q;
    }
//END: QERRIES

    public function getAllActive()
    {
        
        if(!self::$active)
        {
            self::$active = $this->queryActive()->execute();
        }
        return self::$active;
    }

    public function getDefaultCulture()
    {
        // główną Culture jest pierwszy rekord przy sortowaniu po polu position (zamiast flagi is_default)
        return $this->queryActive()->fetchOne();
    }
}