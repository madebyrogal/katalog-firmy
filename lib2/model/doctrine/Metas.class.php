<?php

/**
 * Metas
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    stgcms2
 * @subpackage model
 * @author     Jerzy Biernacki <jurek@studiotg.pl>, Paweł Sałajczyk <pawel@studiotg.pl>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Metas extends BaseMetas
{
    /**
     * SAVES TRANSLATIONS
     */
    public function initalizeTranslations() {
      foreach(Lang::getInstance()->getAll()->toArray() as $lang) { //foreach language
        $this->Translation[$lang]; //nic z tym nie robię - wystarczy, że to się zainicjalizuje w obiekcie
      }
    }

    public function save(Doctrine_Connection $conn = null)
    {
      $this->initalizeTranslations(); // żeby zapisały się wersje językowe

        T::cc('frontend');
        return parent::save($conn);
    }

    public function delete(Doctrine_Connection $conn = null)
    {
        T::cc('frontend');
        return parent::delete($conn);
    }

    public static function createAndSave() {
      $metas = new Metas();
      $metas->save();
      return $metas;
    }

    public static function deleteByObject($object) {
      $meta_id = $object->getMetaId();
      if ($meta_id) {
        $objectClass = get_class($object);

        $identifiers = Doctrine::getTable($objectClass)->getIdentifierColumnNames();
        $pk = reset($identifiers);

        Doctrine_Query::create()
                ->update($objectClass)
                ->set('meta_id', 'NULL')
                ->addWhere($pk .' = ?', $object->getPrimaryKey())
                ->execute();

        $meta = Doctrine::getTable('Metas')->find($meta_id);
        if ($meta) {
          $meta->delete();
        }
      }
    }

    public function generateMetas($object)
    {
        $title_field = "";
        $description_field = "";

        $class = get_class($object);

        $enable_langs = false;

        switch($class)
        {
          case 'Articles' :
              $title_field = 'title';
              $description_field = 'content';
              $enable_langs = true;
              break;
          case 'ArtCategories' :
              $title_field = 'name';
              $description_field = 'name';
              $enable_langs = true;
              break;
          case 'Galleries' :
              $title_field = 'name';
              $description_field = 'name';
              $enable_langs = true;
              break;
          case 'Category' :
              $title_field = 'name';
              $description_field = 'name';
              break;
          case 'Company' :
              $title_field = 'name';
              $description_field = 'description';
              break;
        }

        if ($enable_langs) { //obiekty tłumaczalne
          foreach(Lang::getInstance()->getAll()->toArray() as $lang) {
            $metaTranslation = $this->Translation[$lang];
            if ($metaTranslation->get('generate')) {
              $objectTranslation = $object->Translation[$lang];

              $title = $objectTranslation->get($title_field);
              $description = $objectTranslation->get($description_field);
              $description = trim(strip_tags((Tools::substrws($description))));
              $keywords = Search::getIndex(strip_tags(Tools::substrws($description)));

              $metaTranslation->set('title', $title);
              $metaTranslation->set('description', $description);
              $metaTranslation->set('keywords', $keywords);
            }
          }
        }
        else { //obiekty nietłumaczalne
//          if ($this->getGenerate()) {
            $title = $object->get($title_field);
            $description = $object->get($description_field);
            $description = trim(strip_tags((Tools::substrws($description))));
            $keywords = Search::getIndex(strip_tags(Tools::substrws($description)));

            // dla wszystkich wersji jezykowych meta zapisuje to samo
            foreach(Lang::getInstance()->getAll()->toArray() as $lang) {
              $metaTranslation = $this->Translation[$lang];

              $metaTranslation->set('title', $title);
              $metaTranslation->set('description', $description);
              $metaTranslation->set('keywords', $keywords);
            }

            // jeśli nie ma języków to zapisz wersję domyślną metas
            $this->set('title', $title);
            $this->set('description', $description);
            $this->set('keywords', $keywords);
//          }
        }
        return $this->save();
    }
}
